// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: queries.sql

package generated

import (
	"context"
	"database/sql"
)

const createShip = `-- name: CreateShip :exec
INSERT INTO ships (mmsi, ship_name)
VALUES ($1, $2)
`

type CreateShipParams struct {
	Mmsi     int64
	ShipName sql.NullString
}

func (q *Queries) CreateShip(ctx context.Context, arg CreateShipParams) error {
	_, err := q.db.ExecContext(ctx, createShip, arg.Mmsi, arg.ShipName)
	return err
}

const emptyDBTables = `-- name: EmptyDBTables :exec
TRUNCATE TABLE position_reports
RESTART IDENTITY CASCADE
`

func (q *Queries) EmptyDBTables(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, emptyDBTables)
	return err
}

const getShip = `-- name: GetShip :one
SELECT mmsi, ship_name
FROM ships
WHERE MMSI = $1
`

func (q *Queries) GetShip(ctx context.Context, mmsi int64) (Ship, error) {
	row := q.db.QueryRowContext(ctx, getShip, mmsi)
	var i Ship
	err := row.Scan(&i.Mmsi, &i.ShipName)
	return i, err
}
